#!/bin/bash

# –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
ORIGINALS_DIR="public/images"

# –ü—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ —Å <img>
SRC_DIR="src"

# –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
TMP_FILE=$(mktemp)

echo "üîç Searching for images in format -XXXpx.*..."

# –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
if [ -f "$TMP_FILE" ]; then
  rm -f "$TMP_FILE"
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É—Ç–∏ –∏–∑ src –∏–ª–∏ srcSet
extract_image_path() {
  local match="$1"
  local pattern="$2"
  echo "$match" | grep -o "$pattern" | head -1
}

# –®–∞–≥ 1: –ù–∞–π–¥—ë–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∏–¥–∞ src="...-XXXpx.*" –∏ srcSet="...-XXXpx.*"
echo "üìÅ Scanning files in $SRC_DIR..."
FILES=$(find "$SRC_DIR" -type f \( -name "*.tsx" -o -name "*.jsx" -o -name "*.js" \) 2>/dev/null)
FILE_COUNT=$(echo "$FILES" | wc -l)
echo "üìÑ Found $FILE_COUNT files to scan"

while IFS= read -r file; do
  if [ -z "$file" ]; then
    continue
  fi
  
  echo "üîç Scanning: $(basename "$file")"
  
  if [ ! -f "$file" ]; then
    echo "‚ö†Ô∏è File not found: $file"
    continue
  fi

  # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
  content=$(cat "$file" 2>/dev/null)
  if [ $? -ne 0 ]; then
    echo "  Error reading file $(basename "$file")"
    continue
  fi

  # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
  pattern_src='src\s*=\s*"([^"]+-\d+px\.(png|jpg|webp))"'
  pattern_srcset='srcSet\s*=\s*"([^"]+-\d+px\.(png|jpg|webp))"'

  # –ò—â–µ–º src="..."
  src_matches=$(echo "$content" | grep -E "$pattern_src" || true)
  if [ -n "$src_matches" ]; then
    echo "  ‚úÖ Found src matches in $(basename "$file")"
    while IFS= read -r match; do
      if [ -n "$match" ]; then
        path=$(echo "$match" | sed -E 's/.*src\s*=\s*"([^"]+)".*/\1/')
        if [ -n "$path" ]; then
          echo "    üìù Found: $path"
          echo "$path" >> "$TMP_FILE"
        fi
      fi
    done <<< "$src_matches"
  fi

  # –ò—â–µ–º srcSet="..."
  srcset_matches=$(echo "$content" | grep -E "$pattern_srcset" || true)
  if [ -n "$srcset_matches" ]; then
    echo "  ‚úÖ Found srcSet matches in $(basename "$file")"
    while IFS= read -r match; do
      if [ -n "$match" ]; then
        path=$(echo "$match" | sed -E 's/.*srcSet\s*=\s*"([^"]+)".*/\1/')
        if [ -n "$path" ]; then
          echo "    üìù Found: $path"
          echo "$path" >> "$TMP_FILE"
        fi
      fi
    done <<< "$srcset_matches"
  fi

done <<< "$FILES"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à–ª–∏ –ª–∏ —á—Ç–æ-—Ç–æ
if [ ! -f "$TMP_FILE" ] || [ ! -s "$TMP_FILE" ]; then
  echo "‚ùå No images found in format -XXXpx.*"
  rm -f "$TMP_FILE"
  exit 1
fi

echo "üñºÔ∏è Found the following image paths:"
cat "$TMP_FILE"

# –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
while IFS= read -r filename; do
  if [ -z "$filename" ]; then
    continue
  fi

  # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ -XXXpx.*
  base=$(echo "$filename" | sed -E 's/-([0-9]+)px\.(png|jpg|webp)$/.\2/')
  base=$(echo "$base" | sed -E 's|^/images/||')

  # –ò–∑–≤–ª–µ–∫–∞–µ–º —à–∏—Ä–∏–Ω—É
  width=$(echo "$filename" | sed -E 's/.*-([0-9]+)px\.(png|jpg|webp)$/\1/')
  if [ -z "$width" ] || ! [[ "$width" =~ ^[0-9]+$ ]]; then
    echo "‚ö†Ô∏è Could not extract width from $filename - skipping"
    continue
  fi

  original="$ORIGINALS_DIR/$base"

  if [ ! -f "$original" ]; then
    echo "‚ö†Ô∏è Original $original not found - skipping"
    continue
  fi

  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Å–∂–∞—Ç–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ images
  resized_filename=$(echo "$filename" | sed -E 's|^/images/||')
  resized="$ORIGINALS_DIR/$resized_filename"

  if [ -f "$resized" ]; then
    echo "üü° Resized image $resized already exists - skipping"
    continue
  fi

  echo "üìê Resizing $original -> $resized (width: ${width}px)"
  magick "$original" -resize "${width}x>" "$resized"

done < "$TMP_FILE"

rm -f "$TMP_FILE"
echo "‚úÖ Done!"